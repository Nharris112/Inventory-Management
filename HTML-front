<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Inventory Management</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            padding: 0;
            background-color: #f9f9f9;
        }
        h1 {
            text-align: center;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin: 20px 0;
        }
        table, th, td {
            border: 1px solid #ddd;
        }
        th, td {
            padding: 10px;
            text-align: left;
        }
        th {
            background-color: #f4f4f4;
        }
        form {
            margin-bottom: 20px;
        }
        form input, form button {
            padding: 10px;
            margin: 5px 0;
        }
    </style>
</head>
<body>
    <h1>Inventory Management</h1>

    <!-- Add Item Form -->
    <form id="add-item-form">
        <h3>Add Item</h3>
        <label for="item-name">Name:</label>
        <input type="text" id="item-name" required>
        <label for="item-category">Category:</label>
        <input type="text" id="item-category" required>
        <label for="item-quantity">Quantity:</label>
        <input type="number" id="item-quantity" min="0" required>
        <label for="item-price">Price:</label>
        <input type="number" id="item-price" min="0" step="0.01" required>
        <button type="submit">Add Item</button>
    </form>

    <!-- Inventory Table -->
    <h3>Inventory</h3>
    <table id="inventory-table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Category</th>
                <th>Quantity</th>
                <th>Price</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            <!-- Dynamic rows go here -->
        </tbody>
    </table>

    <script>
        // Simulated inventory data (replace with actual API calls)
        let inventory = [];

        // Function to render the inventory table
        function renderTable() {
            const tableBody = document.getElementById('inventory-table').querySelector('tbody');
            tableBody.innerHTML = ''; // Clear existing rows
            inventory.forEach((item, index) => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${item.id}</td>
                    <td>${item.name}</td>
                    <td>${item.category}</td>
                    <td>${item.quantity}</td>
                    <td>$${item.price.toFixed(2)}</td>
                    <td>
                        <button onclick="deleteItem(${index})">Delete</button>
                    </td>
                `;
                tableBody.appendChild(row);
            });
        }

        // Function to handle form submission
        document.getElementById('add-item-form').addEventListener('submit', function (event) {
            event.preventDefault();
            const name = document.getElementById('item-name').value;
            const category = document.getElementById('item-category').value;
            const quantity = parseInt(document.getElementById('item-quantity').value, 10);
            const price = parseFloat(document.getElementById('item-price').value);

            // Add new item (simulate API call)
            inventory.push({ id: inventory.length + 1, name, category, quantity, price });

            // Clear form and re-render table
            this.reset();
            renderTable();
        });

        // Function to delete an item
        function deleteItem(index) {
            inventory.splice(index, 1); // Remove item from array
            renderTable();
        }

        // Initial render
        renderTable();
    </script>
</body>
</html>
